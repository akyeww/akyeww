{"mappings":"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","sources":["src/script.js"],"sourcesContent":["/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    alpha: true\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)\ncamera.position.z = 6\n// Group\nconst cameraGroup = new THREE.Group()\ncameraGroup.add(camera)\nscene.add(cameraGroup)\n\n/**\n * Lights\n */\nconst directionalLight = new THREE.DirectionalLight('#ffffff', 1)\ndirectionalLight.position.set(1, 1, 0)\nscene.add(directionalLight)\n\n/**\n * Objects\n */\n// Test cube\nconst cube = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: '#ff0000' })\n)\n// scene.add(cube)\n\n// Material\nconst material = new THREE.MeshToonMaterial({ color: '#ffeded' })\n// Meshes\nconst mesh1 = new THREE.Mesh(new THREE.TorusGeometry(1, 0.4, 16, 60), material)\nconst mesh2 = new THREE.Mesh(new THREE.ConeGeometry(1, 2, 32), material)\nconst mesh3 = new THREE.Mesh(new THREE.TorusKnotGeometry(0.8, 0.35, 100, 16), material)\nscene.add(mesh1, mesh2, mesh3)\n\nconst sectionMeshes = [ mesh1, mesh2, mesh3 ]\nconst objectsDistance = 4\nmesh1.position.x = 1.75\nmesh2.position.x = -1.75\nmesh3.position.x = 1.75\nmesh1.position.y = -objectsDistance * 0\nmesh2.position.y = -objectsDistance * 1\nmesh3.position.y = -objectsDistance * 2\n\n/**\n * Particles\n */\n// Geometry\nconst particlesCount = 200\nconst positions = new Float32Array(particlesCount * 3)\nfor (let i = 0; i < particlesCount; i++) {\n    positions[i * 3 + 0] = (Math.random() - 0.5) * 10\n    positions[i * 3 + 1] = objectsDistance * 0.5 - Math.random() * objectsDistance * sectionMeshes.length\n    positions[i * 3 + 2] = (Math.random() - 0.5) * 10\n}\n\nconst particlesGeometry = new THREE.BufferGeometry()\nparticlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n\n// Material\nconst particlesMaterial = new THREE.PointsMaterial({\n    color: '#ffeded',\n    sizeAttenuation: true,\n    size: 0.03\n})\n\n// Points\nconst particles = new THREE.Points(particlesGeometry, particlesMaterial)\nscene.add(particles)\n\n/**\n * Event listeners\n */\nlet scrollY = window.scrollY\nlet currentSection = 0\nwindow.addEventListener('scroll', () => {\n    scrollY = window.scrollY\n\n    const newSection = Math.round(scrollY / sizes.height)\n    if (newSection != currentSection) {\n        currentSection = newSection\n        gsap.to(\n            sectionMeshes[currentSection].rotation,\n            {\n                duration: 1.5,\n                ease: 'power2.inOut',\n                x: '+=6',\n                y: '+=3'\n            }\n        )\n    }\n})\n\n// Cursor\nconst cursor = {}\ncursor.x = 0\ncursor.y = 0\nwindow.addEventListener('mousemove', (event) => {\n    cursor.x = event.clientX / sizes.width - 0.5\n    cursor.y = event.clientY / sizes.height - 0.5\n})\n\nwindow.addEventListener('resize', () => {\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\nlet previousTime = 0\n\nconst tick = () => {\n    const elapsedTime = clock.getElapsedTime()\n    const deltaTime = elapsedTime - previousTime\n    previousTime = elapsedTime\n\n    // Animate meshes\n    for(const mesh of sectionMeshes) {\n        mesh.rotation.x += deltaTime * 0.1\n        mesh.rotation.y += deltaTime * 0.12\n    }\n\n    // Animate camera\n    camera.position.y = -scrollY / sizes.height * objectsDistance\n    parallax = cursor.x\n    cameraGroup.position.x += (cursor.x - cameraGroup.position.x) * 5 * deltaTime\n    cameraGroup.position.y += (-cursor.y - cameraGroup.position.y) * 5 * deltaTime\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["sizes","width","window","innerWidth","height","innerHeight","canvas","document","querySelector","scene","THREE","Scene","renderer","WebGLRenderer","alpha","setSize","setPixelRatio","Math","min","devicePixelRatio","camera","PerspectiveCamera","position","z","cameraGroup","Group","add","directionalLight","DirectionalLight","set","cube","Mesh","BoxGeometry","MeshBasicMaterial","color","material","MeshToonMaterial","mesh1","TorusGeometry","mesh2","ConeGeometry","mesh3","TorusKnotGeometry","sectionMeshes","objectsDistance","x","y","particlesCount","positions","Float32Array","i","random","length","particlesGeometry","BufferGeometry","setAttribute","BufferAttribute","particlesMaterial","PointsMaterial","sizeAttenuation","size","particles","Points","scrollY","currentSection","addEventListener","newSection","round","gsap","to","rotation","duration","ease","cursor","event","clientX","clientY","aspect","updateProjectionMatrix","clock","Clock","previousTime","tick","elapsedTime","getElapsedTime","deltaTime","mesh","parallax","render","requestAnimationFrame"],"version":3,"file":"index.83b00cd7.js.map"}